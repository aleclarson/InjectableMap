// Generated by CoffeeScript 1.12.4
var InjectableMap, NamedFunction, assertType, bind, inject, isDev, merge, setType, sliceArray, validate;

NamedFunction = require("NamedFunction");

assertType = require("assertType");

sliceArray = require("sliceArray");

setType = require("setType");

isDev = require("isDev");

bind = require("bind");

InjectableMap = NamedFunction("InjectableMap", function(types) {
  var injectable;
  assertType(types, Object);
  injectable = {
    types: types,
    values: Object.create(null)
  };
  injectable.inject = bind.func(inject, injectable);
  return setType(injectable, InjectableMap);
});

InjectableMap.prototype = {
  has: function(key) {
    return this.values[key] !== void 0;
  },
  get: function(key, defaultValue) {
    if (arguments.length > 1) {
      return this.values[key] || (this.values[key] = validate(key, defaultValue, this.types));
    } else {
      return this.values[key];
    }
  },
  call: function(key) {
    if (this.values[key] === void 0) {
      throw Error("Expected '" + key + "' to exist!");
    }
    return this.values[key].apply(null, sliceArray(arguments, 1));
  }
};

module.exports = InjectableMap;

inject = function(key, newValue) {
  if (arguments.length > 1) {
    return this.values[key] = validate(key, newValue, this.types);
  } else {
    return merge(arguments[0], this.values, this.types);
  }
};

validate = function(key, value, types) {
  if (types[key]) {
    assertType(value, types[key], key);
  }
  if (isDev && types[key] === void 0) {
    throw Error("Invalid key: '" + key + "'");
  }
  return value;
};

merge = function(newValues, values, types) {
  var key, newValue;
  for (key in newValues) {
    newValue = newValues[key];
    values[key] = validate(key, newValue, types);
  }
};
